/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as _postsRouteRouteImport } from './routes/__posts/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as _postsPostNameRouteImport } from './routes/__posts/$postName'

const _postsRouteRoute = _postsRouteRouteImport.update({
  id: '/__posts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const _postsPostNameRoute = _postsPostNameRouteImport.update({
  id: '/$postName',
  path: '/$postName',
  getParentRoute: () => _postsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$postName': typeof _postsPostNameRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$postName': typeof _postsPostNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/__posts': typeof _postsRouteRouteWithChildren
  '/__posts/$postName': typeof _postsPostNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$postName'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$postName'
  id: '__root__' | '/' | '/__posts' | '/__posts/$postName'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  _postsRouteRoute: typeof _postsRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__posts': {
      id: '/__posts'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _postsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__posts/$postName': {
      id: '/__posts/$postName'
      path: '/$postName'
      fullPath: '/$postName'
      preLoaderRoute: typeof _postsPostNameRouteImport
      parentRoute: typeof _postsRouteRoute
    }
  }
}

interface _postsRouteRouteChildren {
  _postsPostNameRoute: typeof _postsPostNameRoute
}

const _postsRouteRouteChildren: _postsRouteRouteChildren = {
  _postsPostNameRoute: _postsPostNameRoute,
}

const _postsRouteRouteWithChildren = _postsRouteRoute._addFileChildren(
  _postsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  _postsRouteRoute: _postsRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
